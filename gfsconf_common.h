
#define DEFAULTGFSCONFDIR "/etc/nexfs"
#define GFSCONFIGTAG "2b339ae7a7f04e45960f8a3fcc638869"
#define GFSCMDTAG "2b339ae7a7f04e45960f8a3fcc638870"
#define GFSNULLTAG "2b339ae7a7f04e45960f8a3fcc638800"
#define GFSNFSCONFTAG "2b339ae7a7f04e45960f8a3fcc638801"
#define GFSTAG 1
#define GFSVALUE 2
#define GFSHELP 3
#define GFSVSTRING 4
#define GFSVMIN 5
#define GFSVMAX 6
#define GFSRESTART 7
#define MAXTIERS 3

#ifndef ENOATTR
#if defined(ENODATA)
#define ENOATTR ENODATA
#else
#define ENOATTR ENOENT
#endif
#endif


#define GFSCONFIGTAGSCOUNT 146  // tags-1 (release not included)
#define GFSCONFIGTAGSIZE 50

int GFSCONFIGTAGLENGTH;
int GFSCMDTAGLENGTH;
int GFSNULLTAGLENGTH;
int GFSNFSCONFTAGLENGTH;
char *GFSCONFDIR;

char GFSCONFIGTAGS[GFSCONFIGTAGSCOUNT][GFSCONFIGTAGSIZE]; 

// Places to update when adding a configuration value
// 
// gfs_liveconf, gfs_createdefaultconf, gfs_loadconfig, gfs_updateliveconf, GFSCONFIGTAG[][], counters GFSCONFIGTAGSCOUNT & GFSCONFIGTAGSIZE 
//

// Define NEXFSRELEASE
char NEXFSRELEASE[16];  // Nexfs Release
#define NEXFSRLEASETAG "NexFS Release"
#define NEXFSRLEASEHELP "The NexFS Release"

// Define NEXFSID
int NEXFSID;
#define DEFAULTNEXFSID "0"
#define NEXFSIDTAG "Nexfs Server ID"
#define NEXFSIDHELP "Unique ID of this Nexfs Server in the Region Cluster"
#define NEXFSIDVALIDATESTRING 0 
#define NEXFSIDVALIDATEMIN 0 
#define NEXFSIDVALIDATEMAX 32768 
#define NEXFSIDRESTARTREQUIRED 0 

// Define NEXFSREGION
char NEXFSREGION[64];
#define DEFAULTNEXFSREGION "nexfs"
#define NEXFSREGIONTAG "NEXFSREGION"
#define NEXFSREGIONHELP "Nexfs server cluster region id"
#define NEXFSREGIONVALIDATESTRING 1
#define NEXFSREGIONVALIDATEMIN 0
#define NEXFSREGIONVALIDATEMAX 64 
#define NEXFSREGIONRESTARTREQUIRED 0

// Define MGMTWEBSERVERENABLED
int MGMTWEBSERVERENABLED;
#define DEFAULTMGMTWEBSERVERENABLED "1"
#define MGMTWEBSERVERENABLEDTAG "MgmtWebSever Enabled"
#define MGMTWEBSERVERENABLEDHELP "Enable the Nexfs intergrated management web server"
#define MGMTWEBSERVERENABLEDVALIDATESTRING 0 
#define MGMTWEBSERVERENABLEDVALIDATEMIN 0 
#define MGMTWEBSERVERENABLEDVALIDATEMAX 1 
#define MGMTWEBSERVERENABLEDRESTARTREQUIRED 0 

// Define MGMTWEBSERVERHTTPSENABLED
int MGMTWEBSERVERHTTPSENABLED;
#define DEFAULTMGMTWEBSERVERHTTPSENABLED "1"
#define MGMTWEBSERVERHTTPSENABLEDTAG "MGMTWebSever SSL Enabled"
#define MGMTWEBSERVERHTTPSENABLEDHELP "Enable the Nexfs intergrated SSL management web server"
#define MGMTWEBSERVERHTTPSENABLEDVALIDATESTRING 0 
#define MGMTWEBSERVERHTTPSENABLEDVALIDATEMIN 0 
#define MGMTWEBSERVERHTTPSENABLEDVALIDATEMAX 1 
#define MGMTWEBSERVERHTTPSENABLEDRESTARTREQUIRED 0 

// Define MGMTWEBSERVERCERTIFICATEIDX
int MGMTWEBSERVERCERTIFICATEIDX;
#define DEFAULTMGMTWEBSERVERCERTIFICATEIDX "0"
#define MGMTWEBSERVERCERTIFICATEIDXTAG "MGMTWebSever SSL Certificate Index ID"
#define MGMTWEBSERVERCERTIFICATEIDXHELP "Index ID of the SSL Certificate chain to use for management webserver https"
#define MGMTWEBSERVERCERTIFICATEIDXVALIDATESTRING 0 
#define MGMTWEBSERVERCERTIFICATEIDXVALIDATEMIN 0 
#define MGMTWEBSERVERCERTIFICATEIDXVALIDATEMAX 1024 
#define MGMTWEBSERVERCERTIFICATEIDXRESTARTREQUIRED 0 

// Define MGMTWEBSERVERPORT
int MGMTWEBSERVERPORT;
#define DEFAULTMGMTWEBSERVERPORT "9200"
#define MGMTWEBSERVERPORTTAG "MgmtWebSever Port"
#define MGMTWEBSERVERPORTHELP "The tcp port the managment web server should listen for requests on"
#define MGMTWEBSERVERPORTVALIDATESTRING 0 
#define MGMTWEBSERVERPORTVALIDATEMIN 32 
#define MGMTWEBSERVERPORTVALIDATEMAX 65535 
#define MGMTWEBSERVERPORTRESTARTREQUIRED 0 
#define DEFAULTMGMTWEBSERVERPORT "9200"

// Define MGMTWEBSERVERMAXCONNECTIONS
int MGMTWEBSERVERMAXCONNECTIONS;
#define DEFAULTMGMTWEBSERVERMAXCONNECTIONS "8"
#define MGMTWEBSERVERMAXCONNECTIONSTAG "Maximum Concurrent Management Webserver Connections"
#define MGMTWEBSERVERMAXCONNECTIONSHELP "Maximum number of concurrent managment webserver connection requests, management webserver must be restarted to take changed setting"
#define MGMTWEBSERVERMAXCONNECTIONSVALIDATESTRING 0 
#define MGMTWEBSERVERMAXCONNECTIONSVALIDATEMIN 1 
#define MGMTWEBSERVERMAXCONNECTIONSVALIDATEMAX 64 
#define MGMTWEBSERVERMAXCONNECTIONSRESTARTREQUIRED 1 

// Define CONTENTWEBSERVERMAXCONNECTIONS
int CONTENTWEBSERVERMAXCONNECTIONS;
#define DEFAULTCONTENTWEBSERVERMAXCONNECTIONS "64"
#define CONTENTWEBSERVERMAXCONNECTIONSTAG "Maximum Concurrent Content Webserver Connections"
#define CONTENTWEBSERVERMAXCONNECTIONSHELP "Maximum number of concurrent content webserver connection requests"
#define CONTENTWEBSERVERMAXCONNECTIONSVALIDATESTRING 0 
#define CONTENTWEBSERVERMAXCONNECTIONSVALIDATEMIN 1 
#define CONTENTWEBSERVERMAXCONNECTIONSVALIDATEMAX 4096 
#define CONTENTWEBSERVERMAXCONNECTIONSRESTARTREQUIRED 1 

// Define CONTENTWEBSERVERINTERFACE
char CONTENTWEBSERVERINTERFACE[256];
#define DEFAULTCONTENTWEBSERVERINTERFACE "ALL"
#define CONTENTWEBSERVERINTERFACETAG "Content WebServer Interface"
#define CONTENTWEBSERVERINTERFACEHELP "Interface to bind the Content Web Server to. Set to 'ALL' to bind to all interfaces"
#define CONTENTWEBSERVERINTERFACEVALIDATESTRING 1 
#define CONTENTWEBSERVERINTERFACEVALIDATEMIN 3 
#define CONTENTWEBSERVERINTERFACEVALIDATEMAX 255 
#define CONTENTWEBSERVERINTERFACERESTARTREQUIRED 0 

// Define CONTENTWEBSERVERPORT
int CONTENTWEBSERVERPORT;
#define DEFAULTCONTENTWEBSERVERPORT "9300"
#define CONTENTWEBSERVERPORTTAG "Content WebSever Port"
#define CONTENTWEBSERVERPORTHELP "The tcp port the content web server should listen for requests on"
#define CONTENTWEBSERVERPORTVALIDATESTRING 0 
#define CONTENTWEBSERVERPORTVALIDATEMIN 32 
#define CONTENTWEBSERVERPORTVALIDATEMAX 65536 
#define CONTENTWEBSERVERPORTRESTARTREQUIRED 0 


// Define CONTENTWEBSERVERPORT
char CONTENTWEBSERVERDEFAULTHOST[256];
#define DEFAULTCONTENTWEBSERVERDEFAULTHOST "<hostname>"
#define CONTENTWEBSERVERDEFAULTHOSTTAG "Content WebSever Host"
#define CONTENTWEBSERVERDEFAULTHOSTHELP "Default Content Server HTTP Host, '<hostname>' defaults to server hostname"
#define CONTENTWEBSERVERDEFAULTHOSTVALIDATESTRING 1 
#define CONTENTWEBSERVERDEFAULTHOSTVALIDATEMIN 1 
#define CONTENTWEBSERVERDEFAULTHOSTVALIDATEMAX 256 
#define CONTENTWEBSERVERDEFAULTHOSTRESTARTREQUIRED 0 

// Define CONTENTWEBSERVERENABLED
int CONTENTWEBSERVERENABLED;
#define DEFAULTCONTENTWEBSERVERENABLED "1"
#define CONTENTWEBSERVERENABLEDTAG "Content WebSever Enabled"
#define CONTENTWEBSERVERENABLEDHELP "Enable the Nexfs content web server"
#define CONTENTWEBSERVERENABLEDVALIDATESTRING 0 
#define CONTENTWEBSERVERENABLEDVALIDATEMIN 0 
#define CONTENTWEBSERVERENABLEDVALIDATEMAX 1 
#define CONTENTWEBSERVERENABLEDRESTARTREQUIRED 0 

// Define CONTENTWEBSERVERHTTPSENABLED
int CONTENTWEBSERVERHTTPSENABLED;
#define DEFAULTCONTENTWEBSERVERHTTPSENABLED "1"
#define CONTENTWEBSERVERHTTPSENABLEDTAG "ContentWebSever SSL Enabled"
#define CONTENTWEBSERVERHTTPSENABLEDHELP "Enable the Nexfs intergrated SSL content web server"
#define CONTENTWEBSERVERHTTPSENABLEDVALIDATESTRING 0 
#define CONTENTWEBSERVERHTTPSENABLEDVALIDATEMIN 0 
#define CONTENTWEBSERVERHTTPSENABLEDVALIDATEMAX 1 
#define CONTENTWEBSERVERHTTPSENABLEDRESTARTREQUIRED 0 

// Define CONTENTWEBSERVERCERTIFICATEIDX
int CONTENTWEBSERVERCERTIFICATEIDX;
#define DEFAULTCONTENTWEBSERVERCERTIFICATEIDX "0"
#define CONTENTWEBSERVERCERTIFICATEIDXTAG "ContentWebSever SSL Certificate Index ID"
#define CONTENTWEBSERVERCERTIFICATEIDXHELP "Index ID of the SSL Certificate chain to use for contentwebserver https"
#define CONTENTWEBSERVERCERTIFICATEIDXVALIDATESTRING 0 
#define CONTENTWEBSERVERCERTIFICATEIDXVALIDATEMIN 0 
#define CONTENTWEBSERVERCERTIFICATEIDXVALIDATEMAX 1024 
#define CONTENTWEBSERVERCERTIFICATEIDXRESTARTREQUIRED 0 

// Define MGMTWEBSERVERINTERFACE
char MGMTWEBSERVERINTERFACE[256];
#define DEFAULTMGMTWEBSERVERINTERFACE "ALL"
#define MGMTWEBSERVERINTERFACETAG "Management WebServer Interface"
#define MGMTWEBSERVERINTERFACEHELP "Interface to bind the Management Web Server to. Set to 'ALL' to bind to all interfaces"
#define MGMTWEBSERVERINTERFACEVALIDATESTRING 1 
#define MGMTWEBSERVERINTERFACEVALIDATEMIN 3 
#define MGMTWEBSERVERINTERFACEVALIDATEMAX 255 
#define MGMTWEBSERVERINTERFACERESTARTREQUIRED 0 


// Define MGMTWEBTOKENEXPIRY
int MGMTWEBTOKENEXPIRY;
#define DEFAULTMGMTWEBTOKENEXPIRY "600"
#define MGMTWEBTOKENEXPIRYTAG "MgmtToken IdleExpiry"
#define MGMTWEBTOKENEXPIRYHELP "Number of seconds after which a idle management api (and webconsole) token should expire"
#define MGMTWEBTOKENEXPIRYVALIDATESTRING 0 
#define MGMTWEBTOKENEXPIRYVALIDATEMIN 60 
#define MGMTWEBTOKENEXPIRYVALIDATEMAX 315600000 
#define MGMTWEBTOKENEXPIRYRESTARTREQUIRED 0 

// Define MGMTWEBENABLECOUNTERS
int MGMTWEBENABLECOUNTERS;
#define DEFAULTMGMTWEBENABLECOUNTERS "1"
#define MGMTWEBENABLECOUNTERSTAG "MgmtWebServer Counter Download"
#define MGMTWEBENABLECOUNTERSHELP "Allow download of Nexfs Counters via the Mgmt Web Server Health URL"
#define MGMTWEBENABLECOUNTERSVALIDATESTRING 0 
#define MGMTWEBENABLECOUNTERSVALIDATEMIN 0 
#define MGMTWEBENABLECOUNTERSVALIDATEMAX 1 
#define MGMTWEBENABLECOUNTERSRESTARTREQUIRED 0 

// Define MGMTWEBENABLEHEALTHCHECK
int MGMTWEBENABLEHEALTHCHECK;
#define DEFAULTMGMTWEBENABLEHEALTHCHECK "0"
#define MGMTWEBENABLEHEALTHCHECKTAG "MgmtWebServer Health URLs"
#define MGMTWEBENABLEHEALTHCHECKHELP "Report Service health as http response via the Mgmt Web Server"
#define MGMTWEBENABLEHEALTHCHECKVALIDATESTRING 0 
#define MGMTWEBENABLEHEALTHCHECKVALIDATEMIN 0 
#define MGMTWEBENABLEHEALTHCHECKVALIDATEMAX 1 
#define MGMTWEBENABLEHEALTHCHECKRESTARTREQUIRED 0 

// Define MGMTWEBENABLEHEALTHCHECKWARN
int MGMTWEBENABLEHEALTHCHECKWARN;
#define DEFAULTMGMTWEBENABLEHEALTHCHECKWARN "1"
#define MGMTWEBENABLEHEALTHCHECKWARNTAG "MgmtWebServer Health Warnings"
#define MGMTWEBENABLEHEALTHCHECKWARNHELP "Report Service health Warnings, off = only report error"
#define MGMTWEBENABLEHEALTHCHECKWARNVALIDATESTRING 0 
#define MGMTWEBENABLEHEALTHCHECKWARNVALIDATEMIN 0 
#define MGMTWEBENABLEHEALTHCHECKWARNVALIDATEMAX 1 
#define MGMTWEBENABLEHEALTHCHECKWARNRESTARTREQUIRED 0 

// Define STRUCTERRTHRESHOLD
int STRUCTERRTHRESHOLD;
#define DEFAULTSTRUCTERRTHRESHOLD "10"
#define STRUCTERRTHRESHOLDTAG "Structure errorThreashold"
#define STRUCTERRTHRESHOLDHELP "The number of errors received when writing to the active structure data volume that triggers a failover to the replication volume"
#define STRUCTERRTHRESHOLDVALIDATESTRING 0 
#define STRUCTERRTHRESHOLDVALIDATEMIN 1 
#define STRUCTERRTHRESHOLDVALIDATEMAX 65535 
#define STRUCTERRTHRESHOLDRESTARTREQUIRED 0 

// Define NEXFSPAUSED
int NEXFSPAUSED;  // pause all client read/write data operations 
#define DEFAULTNEXFSPAUSED "0"
#define NEXFSPAUSEDTAG "Nexfs Operations Paused"
#define NEXFSPAUSEDHELP "When paused nexfs will stop accepting file opens/creates/reads and writes, does not effect the job scheduler or bg migrations"
#define NEXFSPAUSEDVALIDATESTRING 0
#define NEXFSPAUSEDVALIDATEMIN 0 
#define NEXFSPAUSEDVALIDATEMAX 1 
#define NEXFSPAUSEDRESTARTREQUIRED 0 

// Define JOBSCHEDULARPAUSED
int JOBSCHEDULARPAUSED;  // if the jobsechedule should run or pause 
#define DEFAULTJOBSCHEDULARPAUSED "0"
#define JOBSCHEDULARPAUSEDTAG "Schedular Paused"
#define JOBSCHEDULARPAUSEDHELP "If the internal jobs schedular is running or paused"
#define JOBSCHEDULARPAUSEDVALIDATESTRING 0
#define JOBSCHEDULARPAUSEDVALIDATEMIN 0 
#define JOBSCHEDULARPAUSEDVALIDATEMAX 1 
#define JOBSCHEDULARPAUSEDRESTARTREQUIRED 0 

// Define BGMIGRATIONSPAUSED 
int BGMIGRATIONSPAUSED;  // if background migrations should run or be paused
#define DEFAULTBGMIGRATIONSPAUSED "0"
#define BGMIGRATIONSPAUSEDTAG "BG Migrations Paused"
#define BGMIGRATIONSPAUSEDHELP "If background migrations can run or  arepaused"
#define BGMIGRATIONSPAUSEDVALIDATESTRING 0
#define BGMIGRATIONSPAUSEDVALIDATEMIN 0 
#define BGMIGRATIONSPAUSEDVALIDATEMAX 1 
#define BGMIGRATIONSPAUSEDRESTARTREQUIRED 0 


// Define BGMIGRATIONMAXTHREADS
int BGMIGRATIONMAXTHREADS;  // the max number of JobScheduler threads
#define DEFAULTBGMIGRATIONMAXTHREADS "8"
#define BGMIGRATIONMAXTHREADSTAG "BG Migration Threads"
#define BGMIGRATIONMAXTHREADSHELP "The Maximum number of Background Migration Threads that can run concurrently"
#define BGMIGRATIONMAXTHREADSVALIDATESTRING 0
#define BGMIGRATIONMAXTHREADSVALIDATEMIN 0 
#define BGMIGRATIONMAXTHREADSVALIDATEMAX 128 
#define BGMIGRATIONMAXTHREADSRESTARTREQUIRED 1 

// Define BGMIGRATIONSTARTWINDOW
int BGMIGRATIONSTARTWINDOW;  // the max number of JobScheduler threads
#define DEFAULTBGMIGRATIONSTARTWINDOW "0000"
#define BGMIGRATIONSTARTWINDOWTAG "BG Migrations Start"
#define BGMIGRATIONSTARTWINDOWHELP "The earilest time of the day to run back ground migrations"
#define BGMIGRATIONSTARTWINDOWVALIDATESTRING 0
#define BGMIGRATIONSTARTWINDOWVALIDATEMIN 0 
#define BGMIGRATIONSTARTWINDOWVALIDATEMAX 2359 
#define BGMIGRATIONSTARTWINDOWRESTARTREQUIRED 0 

// Define BGMIRGATIONENDWINDOW
int BGMIGRATIONENDWINDOW;  // the max number of JobScheduler threads
#define DEFAULTBGMIGRATIONENDWINDOW "2359"
#define BGMIGRATIONENDWINDOWTAG "BG Migrations End"
#define BGMIGRATIONENDWINDOWHELP "The latested time of the day to run background migrations"
#define BGMIGRATIONENDWINDOWVALIDATESTRING 0
#define BGMIGRATIONENDWINDOWVALIDATEMIN 0 
#define BGMIGRATIONENDWINDOWVALIDATEMAX 2359 
#define BGMIGRATIONENDWINDOWRESTARTREQUIRED 0 

// Define BGMIGRATIONSLEEPMS
int BGMIGRATIONSLEEPMS;  // time in ms to sleep between each background migration 
#define DEFAULTBGMIGRATIONSLEEPMS "0"
#define BGMIGRATIONSLEEPMSTAG "BG Migration Sleep"
#define BGMIGRATIONSLEEPMSHELP "ms a wroker thread will sleep between background migration jobs"
#define BGMIGRATIONSLEEPMSVALIDATESTRING 0
#define BGMIGRATIONSLEEPMSVALIDATEMIN 0 
#define BGMIGRATIONSLEEPMSVALIDATEMAX 999999 
#define BGMIGRATIONSLEEPMSRESTARTREQUIRED 0 

// Define BGMIRGATIONT1FLOOR
int BGMIGRATIONT1FLOOR;  // the max number of JobScheduler threads
#define DEFAULTBGMIGRATIONT1FLOOR "50"
#define BGMIGRATIONT1FLOORTAG "BG Migrations Tier1 Floor Percentage"
#define BGMIGRATIONT1FLOORHELP "Percentange used that bg migrations should aim to reduce Tier-1 to during scheduled window (inconjuction with defined last used/accessed)"
#define BGMIGRATIONT1FLOORVALIDATESTRING 0
#define BGMIGRATIONT1FLOORVALIDATEMIN 0 
#define BGMIGRATIONT1FLOORVALIDATEMAX 100 
#define BGMIGRATIONT1FLOORRESTARTREQUIRED 0 

// Define BGMIRGATIONT1FLOOR
int BGMIGRATIONT2FLOOR;  // the max number of JobScheduler threads
#define DEFAULTBGMIGRATIONT2FLOOR "50"
#define BGMIGRATIONT2FLOORTAG "BG Migrations Tier2 Floor Percentage"
#define BGMIGRATIONT2FLOORHELP "Percentange used that bg migrations should aim to reduce Tier-2 to during scheduled window (inconjuction with defined last used/accessed)"
#define BGMIGRATIONT2FLOORVALIDATESTRING 0
#define BGMIGRATIONT2FLOORVALIDATEMIN 0 
#define BGMIGRATIONT2FLOORVALIDATEMAX 100 
#define BGMIGRATIONT2FLOORRESTARTREQUIRED 0 

// Define JSMAXTHREADS
int JSMAXTHREADS;  // the max number of JobScheduler threads
#define DEFAULTJSMAXTHREADS "4"
#define JSMAXTHREADSTAG "Schedular Threads"
#define JSMAXTHREADSHELP "The Maximum number of Job Scheduler Threads that can run concurrently"
#define JSMAXTHREADSVALIDATESTRING 0
#define JSMAXTHREADSVALIDATEMIN 0 
#define JSMAXTHREADSVALIDATEMAX 16 
#define JSMAXTHREADSRESTARTREQUIRED 1 

// Define JSMAXTHREADS
int JSMAXQUEUESIZE;  // the max number of Job queue entries
#define DEFAULTJSMAXQUEUESIZE "10000"
#define JSMAXQUEUESIZETAG "Job Queue Size"
#define JSMAXQUEUESIZEHELP "The Maximum number of Jobs that can be in the queue, once max is reached that then the queue is recycled reusings completed job queue slots" 
#define JSMAXQUEUESIZEVALIDATESTRING 0
#define JSMAXQUEUESIZEVALIDATEMIN 1000 
#define JSMAXQUEUESIZEVALIDATEMAX 100000 
#define JSMAXQUEUESIZERESTARTREQUIRED 1 

// Define JOBSCHEDULARSLEEP
int JOBSCHEDULARSLEEP;  // first highest pref local data storage location
#define DEFAULTJOBSCHEDULARSLEEP "60"
#define JOBSCHEDULARSLEEPTAG "Schedular Sleep"
#define JOBSCHEDULARSLEEPHELP "Seconds the internal jobs and bg migration scheduler should sleep between determining if a job should be started"
#define JOBSCHEDULARSLEEPVALIDATESTRING 0
#define JOBSCHEDULARSLEEPVALIDATEMIN 0 
#define JOBSCHEDULARSLEEPVALIDATEMAX 3600 
#define JOBSCHEDULARSLEEPRESTARTREQUIRED 0 

// Define JOBSCHEDULARSALLOWMANUALWHENPAUSED
int JOBSCHEDULARSALLOWMANUALWHENPAUSED;  // first highest pref local data storage location
#define DEFAULTJOBSCHEDULARALLOWMANUALWHENPAUSED "0"
#define JOBSCHEDULARALLOWMANUALWHENPAUSEDTAG "Schedular allow Manual"
#define JOBSCHEDULARALLOWMANUALWHENPAUSEDHELP "Allow Manual jobs to be run when the scheduler is paused"
#define JOBSCHEDULARALLOWMANUALWHENPAUSEDVALIDATESTRING 0
#define JOBSCHEDULARALLOWMANUALWHENPAUSEDVALIDATEMIN 0 
#define JOBSCHEDULARALLOWMANUALWHENPAUSEDVALIDATEMAX 1 
#define JOBSCHEDULARALLOWMANUALWHENPAUSEDRESTARTREQUIRED 0

// Define T1DDIR
char T1DDIR[2048];  // highest pref local data storage location
#define DEFAULTT1DDIR "/nexfs/t1"
#define T1DDIRTAG "Tier-1 data storage location"
#define T1DDIRHELP "Location of the highest preformance local storage to be used for data storage, ensure that no data remains in previous location before restarting nexfs"
#define T1DDIRVALIDATESTRING 1
#define T1DDIRVALIDATEMIN 2 
#define T1DDIRVALIDATEMAX 2048 
#define T1DDIRRESTARTREQUIRED 0 

// Define T2DDIR
char T2DDIR[2048];  // second highest pref local data storage location
#define DEFAULTT2DDIR "/nexfs/t2"
#define T2DDIRTAG "Tier-2 data storage location"
#define T2DDIRHELP "Location of the second highest preformance local storage to be used for data storage, ensure that no data remains in previous location before restarting nexfs"
#define T2DDIRVALIDATESTRING 1
#define T2DDIRVALIDATEMIN 2 
#define T2DDIRVALIDATEMAX 2048 
#define T2DDIRRESTARTREQUIRED 0 

// Define T1SDIR
 char T1SDIR[2048];  // high pref local for structure file storage location
#define DEFAULTT1SDIR "/nexfs/s1"
#define T1SDIRTAG "Primary Nexfs Structure Storage Location"
#define T1SDIRHELP "The path to the mountpoint or folder on the server that Nexfs is installed on to store file structure information, must be a full path starting with /"
#define T1SDIRVALIDATESTRING 1
#define T1SDIRVALIDATEMIN 2 
#define T1SDIRVALIDATEMAX 2048 
#define T1SDIRRESTARTREQUIRED 0 

// Define T2SDIR
 char T2SDIR[2048];  // high pref local for structure file storage location
#define DEFAULTT2SDIR "/nexfs/s2"
#define T2SDIRTAG "Structure data replication location"
#define T2SDIRHELP "The path to the mountpoint/folder that Nexfs will use to replicate file structure information, must be a full path starting with /"
#define T2SDIRVALIDATESTRING 1
#define T2SDIRVALIDATEMIN 0 
#define T2SDIRVALIDATEMAX 2048 
#define T2SDIRRESTARTREQUIRED 0 

// Define T2SREPLICATIONMODE
int T2SREPLICATIONMODE;  // high pref local for structure file storage location
#define DEFAULTT2SREPLICATIONMODE "0"
#define T2SREPLICATIONMODETAG "Structure Data Replication Mode"
#define T2SREPLICATIONMODEHELP "Structure index information replication mode. 0=disabled, 1=asynchronous 2=synchronous"
#define T2SREPLICATIONMODEVALIDATESTRING 0
#define T2SREPLICATIONMODEVALIDATEMIN 0 
#define T2SREPLICATIONMODEVALIDATEMAX 2 
#define T2SREPLICATIONMODERESTARTREQUIRED 0 


// Define T1DDIRENABLED
int T1DDIRENABLED;  // first highest pref local data storage location
#define DEFAULTT1DDIRENABLED "0"
#define T1DDIRENABLEDTAG "Enable the Tier-1 data storage location"
#define T1DDIRENABLEDHELP "Enable Tier-1 local storage"
#define T1DDIRENABLEDVALIDATESTRING 0
#define T1DDIRENABLEDVALIDATEMIN 0 
#define T1DDIRENABLEDVALIDATEMAX 1 
#define T1DDIRENABLEDRESTARTREQUIRED 0 

// Define T2DDIRENABLED
int T2DDIRENABLED;  // second highest pref local data storage location
#define DEFAULTT2DDIRENABLED "0"
#define T2DDIRENABLEDTAG "Enable the Tier-2 data storage location"
#define T2DDIRENABLEDHELP "Enable Tier-2 local storage"
#define T2DDIRENABLEDVALIDATESTRING 0
#define T2DDIRENABLEDVALIDATEMIN 0 
#define T2DDIRENABLEDVALIDATEMAX 1 
#define T2DDIRENABLEDRESTARTREQUIRED 0 

// Define T3DDIRENABLED
int T3DDIRENABLED;  // Tier-3 storage location (S3 Compabitable)
#define DEFAULTT3DDIRENABLED "0"
#define T3DDIRENABLEDTAG "Enable the Tier-3 S3 Compatible data storage location"
#define T3DDIRENABLEDHELP "Enable the Tier-3 S3 Compatible data storage location"
#define T3DDIRENABLEDVALIDATESTRING 0
#define T3DDIRENABLEDVALIDATEMIN 0 
#define T3DDIRENABLEDVALIDATEMAX 1 
#define T3DDIRENABLEDRESTARTREQUIRED 0 


// Define T1LOWWATERMARK
int T1LOWWATERMARK;  // Tier-1 dont use for reads that cannot already be served by T1 when this percent used T1 is hit, start migrating data to next tier  
#define DEFAULTT1LOWWATERMARK "60"
#define T1LOWWATERMARKTAG "Tier-1 Low Water Mark"
#define T1LOWWATERMARKHELP "Tier-1 Low Water Mark, serv only writes, and reads that can already be served by T1, new reads served by next available tier, start migrating data to next tier"
#define T1LOWWATERMARKVALIDATESTRING 0
#define T1LOWWATERMARKVALIDATEMIN 0 
#define T1LOWWATERMARKVALIDATEMAX 95
#define T1LOWWATERMARKRESTARTREQUIRED 0 

// Define T1HIGHWATERMARK
int T1HIGHWATERMARK;  // Tier-1 only serv reads and write for data already at T1 if percent used T1 is hit, start migrating data to next tier  
#define DEFAULTT1HIGHWATERMARK "75"
#define T1HIGHWATERMARKTAG "Tier-1 High Water Mark"
#define T1HIGHWATERMARKHELP "Tier-1 High Water Mark, serv only writes reads that can already be served by T1, start migrating data to next tier"
#define T1HIGHWATERMARKVALIDATESTRING 0
#define T1HIGHWATERMARKVALIDATEMIN 0 
#define T1HIGHWATERMARKVALIDATEMAX 90 
#define T1HIGHWATERMARKRESTARTREQUIRED 0 

// Define T2LOWWATERMARK
int T2LOWWATERMARK;  // Tier-2 dont use for reads that cannot already be served by T2 when this percent used T2 is hit, start migrating data to next tier  
#define DEFAULTT2LOWWATERMARK "75"
#define T2LOWWATERMARKTAG "Tier-2 Low Water Mark"
#define T2LOWWATERMARKHELP "Tier-2 Low Water Mark, serv only writes, and reads that can already be served by T2, other reads driect from next tier, start migrating data to next tier"
#define T2LOWWATERMARKVALIDATESTRING 0
#define T2LOWWATERMARKVALIDATEMIN 0 
#define T2LOWWATERMARKVALIDATEMAX 95
#define T2LOWWATERMARKRESTARTREQUIRED 0 

// Define T2HIGHWATERWATERMARK
int T2HIGHWATERMARK;  // Tier-1 only serv reads and write for data already at T1 if percent used T1 is hit, start migrating data to next tier  
#define DEFAULTT2HIGHWATERMARK "85"
#define T2HIGHWATERMARKTAG "Tier-2 High Water Mark"
#define T2HIGHWATERMARKHELP "Tier-2 High Water Mark, serv only writes reads that can already be served by T2, start migrating data to next tier"
#define T2HIGHWATERMARKVALIDATESTRING 0
#define T2HIGHWATERMARKVALIDATEMIN 0 
#define T2HIGHWATERMARKVALIDATEMAX 90 
#define T2HIGHWATERMARKRESTARTREQUIRED 0 

// Define SMARTPROTECTENABLED
int SMARTPROTECTENABLED;  // Enable Smart Protection
#define DEFAULTSMARTPROTECTENABLED "0"
#define SMARTPROTECTENABLEDTAG "Smart Protect Enabled"
#define SMARTPROTECTENABLEDHELP "Smart Protect Enabled, controlls both smartprotect and smart protect open file cycle, 0=off, 1=on"
#define SMARTPROTECTENABLEDVALIDATESTRING 0
#define SMARTPROTECTENABLEDVALIDATEMIN 0 
#define SMARTPROTECTENABLEDVALIDATEMAX 1 
#define SMARTPROTECTENABLEDRESTARTREQUIRED 0 

// Define SMARTPROTECT
int SMARTPROTECT;  // Continuous Protection
#define DEFAULTSMARTPROTECT "1"
#define SMARTPROTECTTAG "Smart Protect"
#define SMARTPROTECTHELP "Smart Protect Setting, 0=off, 1=on file close, 2=on data partclose, 3 on file and data part close"
#define SMARTPROTECTVALIDATESTRING 0
#define SMARTPROTECTVALIDATEMIN 0 
#define SMARTPROTECTVALIDATEMAX 3 
#define SMARTPROTECTRESTARTREQUIRED 0 

// Define SMARTPROTECTOPENFILECYCLE
int SMARTPROTECTOPENFILECYCLE;  // when to smart protect an open file
#define DEFAULTSMARTPROTECTOPENFILECYCLE "60"
#define SMARTPROTECTOPENFILECYCLETAG "Smart Protect Open File"
#define SMARTPROTECTOPENFILECYCLEHELP "How often in minutes to smart protect changed dataparts on a open file, 0=never, max=43200"
#define SMARTPROTECTOPENFILECYCLEVALIDATESTRING 0
#define SMARTPROTECTOPENFILECYCLEVALIDATEMIN 0 
#define SMARTPROTECTOPENFILECYCLEVALIDATEMAX 43200 
#define SMARTPROTECTOPENFILECYCLERESTARTREQUIRED 0 

// Define SMARTPROTECTANDTIERONQUEUEFULL
int SMARTPROTECTANDTIERONQUEUEFULL;
#define DEFAULTSMARTPROTECTANDTIERONQUEUEFULL "1"
#define SMARTPROTECTANDTIERONQUEUEFULLTAG "SMARTPROTECTANDTIERONQUEUEFULL"
#define SMARTPROTECTANDTIERONQUEUEFULLHELP "If smart queue is full, 0=wait for a slot to free, 1=process job instantly outside of queue"
#define SMARTPROTECTANDTIERONQUEUEFULLVALIDATESTRING 0
#define SMARTPROTECTANDTIERONQUEUEFULLVALIDATEMIN 0
#define SMARTPROTECTANDTIERONQUEUEFULLVALIDATEMAX 86400 
#define SMARTPROTECTANDTIERONQUEUEFULLRESTARTREQUIRED 0

// Define SMARTTIERENABLED
int SMARTTIERENABLED;  // Enable Tiering 
#define DEFAULTSMARTTIERENABLED "0"
#define SMARTTIERENABLEDTAG "Smart Tiering Enabled"
#define SMARTTIERENABLEDHELP "Smart Tiering Enabled, controlls both smart tier and smart tier open file cycle, 0=off, 1=on"
#define SMARTTIERENABLEDVALIDATESTRING 0
#define SMARTTIERENABLEDVALIDATEMIN 0 
#define SMARTTIERENABLEDVALIDATEMAX 1 
#define SMARTTIERENABLEDRESTARTREQUIRED 0 

// Define SMARTTIER
int SMARTTIER;  // Continuous Tiering
#define DEFAULTSMARTTIER "1"
#define SMARTTIERTAG "Smart Tier Mode"
#define SMARTTIERHELP "Smart Tier Setting, 0=off, 1=on file close, 2=on data partclose, 3 on file and data part close"
#define SMARTTIERVALIDATESTRING 0
#define SMARTTIERVALIDATEMIN 0 
#define SMARTTIERVALIDATEMAX 3 
#define SMARTTIERRESTARTREQUIRED 0 

// Define SMARTTIEROPENFILECYCLE
int SMARTTIEROPENFILECYCLE;  // when to scan for smart tier an open file
#define DEFAULTSMARTTIEROPENFILECYCLE "120"
#define SMARTTIEROPENFILECYCLETAG "Smart Tier Start Cycle" 
#define SMARTTIEROPENFILECYCLEHELP "How often in minutes to smart tier scans a open files dataparts, 0=never, max=43200"
#define SMARTTIEROPENFILECYCLEVALIDATESTRING 0
#define SMARTTIEROPENFILECYCLEVALIDATEMIN 0 
#define SMARTTIEROPENFILECYCLEVALIDATEMAX 43200 
#define SMARTTIEROPENFILECYCLERESTARTREQUIRED 0 

// Define NEXFSTIER1LASTWRITTEN
int NEXFSTIER1LASTWRITTEN;  // when to smart tier an open file
#define DEFAULTNEXFSTIER1LASTWRITTEN "1440"
#define NEXFSTIER1LASTWRITTENTAG "Smart Tier1 Last Written"
#define NEXFSTIER1LASTWRITTENHELP "How long in seconds after a datapart has been written and not accessed before it can be moved from tier1 or 2 storage, min=20, max=43200"
#define NEXFSTIER1LASTWRITTENVALIDATESTRING 0
#define NEXFSTIER1LASTWRITTENVALIDATEMIN 20 
#define NEXFSTIER1LASTWRITTENVALIDATEMAX 43200 
#define NEXFSTIER1LASTWRITTENRESTARTREQUIRED 0 

// Define NEXFSTIER1LASTACCESSED
int NEXFSTIER1LASTACCESSED;  // when to smart tier an open file
#define DEFAULTNEXFSTIER1LASTACCESSED "2880"
#define NEXFSTIER1LASTACCESSEDTAG "Smart Tier1 Last Accessed"
#define NEXFSTIER1LASTACCESSEDHELP "How long int seconds after a datapart was last accessed before it can be moved from tier1 or 2 storage, min=20, max=43200"
#define NEXFSTIER1LASTACCESSEDVALIDATESTRING 0
#define NEXFSTIER1LASTACCESSEDVALIDATEMIN 20 
#define NEXFSTIER1LASTACCESSEDVALIDATEMAX 43200 
#define NEXFSTIER1LASTACCESSEDRESTARTREQUIRED 0 

// Define NEXFSTIER2LASTWRITTEN
int NEXFSTIER2LASTWRITTEN;  // when to smart tier an open file
#define DEFAULTNEXFSTIER2LASTWRITTEN "7200"
#define NEXFSTIER2LASTWRITTENTAG "Smart Tier2 Last Written"
#define NEXFSTIER2LASTWRITTENHELP "How long int seconds after a datapart has been written and not accessed before it can be moved from tier2 storage, 0=never, max=43200"
#define NEXFSTIER2LASTWRITTENVALIDATESTRING 0
#define NEXFSTIER2LASTWRITTENVALIDATEMIN 0 
#define NEXFSTIER2LASTWRITTENVALIDATEMAX 43200 
#define NEXFSTIER2LASTWRITTENRESTARTREQUIRED 0 

// Define NEXFSTIER2LASTACCESSED
int NEXFSTIER2LASTACCESSED;  // when to smart tier an open file
#define DEFAULTNEXFSTIER2LASTACCESSED "20160"
#define NEXFSTIER2LASTACCESSEDTAG "Smart Tier2 Last Accessed"
#define NEXFSTIER2LASTACCESSEDHELP "How long in seconds after a datapart was last accessed before it can be moved from tier2 storage, 0=never, max=43200"
#define NEXFSTIER2LASTACCESSEDVALIDATESTRING 0
#define NEXFSTIER2LASTACCESSEDVALIDATEMIN 0 
#define NEXFSTIER2LASTACCESSEDVALIDATEMAX 43200 
#define NEXFSTIER2LASTACCESSEDRESTARTREQUIRED 0 

// Define RETIERORDER
int RETIERORDER;  // order to retier from tier3 on read
#define DEFAULTRETIERORDER "12"
#define RETIERORDERTAG "Re-Tier on read/write tier order"
#define RETIERORDERHELP "Which tier to move dataparts too when they become active again after move to tier-3"
#define RETIERORDERVALIDATESTRING 0
#define RETIERORDERVALIDATEMIN 0 
#define RETIERORDERVALIDATEMAX 21 
#define RETIERORDERRESTARTREQUIRED 0 

// Define RETIERORDER
int RETIERONREAD;  // retier datafile on read from slower tier
#define DEFAULTRETIERONREAD "0"
#define RETIERONREADTAG "Re-Tier On Read"
#define RETIERONREADHELP "If reads requests from a slower tier should tigger datafile migration to fast tiers"
#define RETIERONREADVALIDATESTRING 0
#define RETIERONREADVALIDATEMIN 0 
#define RETIERONREADVALIDATEMAX 1 
#define RETIERONREADRESTARTREQUIRED 0 

// Define PARTSIZE
int PARTSIZE;  // data file size
#define DEFAULTPARTSIZE "1024000"
#define PARTSIZETAG "Part Size"
#define PARTSIZEHELP "Data file Part size in bytes, files are split into chunks of this size for migration to slower tiers, NOTE: existing files will retain the partsize configured when first created"
#define PARTSIZEVALIDATESTRING 0
#define PARTSIZEVALIDATEMIN 512 
#define PARTSIZEVALIDATEMAX 8192000 
#define PARTSIZERESTARTREQUIRED 0 

// Define WRITEBUFSIZE
int WRITEBUFSIZE;  // Size of incoming write buffer (for receiving data from the kernel)
#define DEFAULTWRITEBUFSIZE "4096000"
#define WRITEBUFSIZETAG "Write Buffer Size"
#define WRITEBUFSIZEHELP "Write buffer size in bytes, Size of incoming write buffer (for receiving data from the kernel)"
#define WRITEBUFSIZEVALIDATESTRING 0
#define WRITEBUFSIZEVALIDATEMIN 512 
#define WRITEBUFSIZEVALIDATEMAX 4096000 
#define WRITEBUFSIZERESTARTREQUIRED 0 

// Define WRITEBUFASYNC /// DO NOT ENABLE, NOT WORKING
int WRITEBUFASYNC;  // write changed buffer content to disk on part change or close 
#define DEFAULTWRITEBUFASYNC "0"
#define WRITEBUFASYNCTAG "Write Buffer Async"
#define WRITEBUFASYNCHELP "Write buffer Async, write buffer changes to disk on part change (default) or as changes are received"
#define WRITEBUFASYNCVALIDATESTRING 0
#define WRITEBUFASYNCVALIDATEMIN 0 
#define WRITEBUFASYNCVALIDATEMAX 1 
#define WRITEBUFASYNCRESTARTREQUIRED 1 

// Define MAXFILENAMELENGTH
int MAXFILENAMELENGTH;  // Max support file name length (number of chars)
#define DEFAULTMAXFILENAMELENGTH "8192"
//#define DEFAULTMAXFILENAMELENGTH "8192"
#define MAXFILENAMELENGTHTAG "Max File Name Length"
#define MAXFILENAMELENGTHHELP "Max number of chars allowed in a file name including full path, currently limited to 2000 chars, will be increased to 65K in upcoming release"
#define MAXFILENAMELENGTHVALIDATESTRING 0
#define MAXFILENAMELENGTHVALIDATEMIN 1024 
#define MAXFILENAMELENGTHVALIDATEMAX 65536 
#define MAXFILENAMELENGTHRESTARTREQUIRED 1 

// Define T3S3ENABLEMD5DIGEST 
int T3S3ENABLEMD5DIGEST;  // S3 Enable MD5 Digest on PUT & POST
#define DEFAULTT3S3ENABLEMD5DIGEST "1"
#define T3S3ENABLEMD5DIGESTTAG "T3 S3 include MD5 Digest"
#define T3S3ENABLEMD5DIGESTHELP "Use data MD5 Digest on Tier-3 S3 PUTS & POSTS"
#define T3S3ENABLEMD5DIGESTVALIDATESTRING 0
#define T3S3ENABLEMD5DIGESTVALIDATEMIN 0
#define T3S3ENABLEMD5DIGESTVALIDATEMAX 1
#define T3S3ENABLEMD5DIGESTRESTARTREQUIRED 0

// Define T3USEHTTPS 
int T3USEHTTPS;  // Connect to T3 storage using HTTPS 
#define DEFAULTT3USEHTTPS "1"
#define T3USEHTTPSTAG "T3 use HTTPS"
#define T3USEHTTPSHELP "Use HTTPS to connect to the T3 storage endpoint"
#define T3USEHTTPSVALIDATESTRING 0
#define T3USEHTTPSVALIDATEMIN 0
#define T3USEHTTPSVALIDATEMAX 1
#define T3USEHTTPSRESTARTREQUIRED 0

// Define T3ALLOWINVALIDSSL 
int T3ALLOWINVALIDSSL;  // Connect to T3 storage even if the SSL cert is invalid 
#define DEFAULTT3ALLOWINVALIDSSL "0"
#define T3ALLOWINVALIDSSLTAG "T3 Allow invalid Cert"
#define T3ALLOWINVALIDSSLHELP "Allow the T3 server to be used even if it returns an invalid SSL Certificate"
#define T3ALLOWINVALIDSSLVALIDATESTRING 0
#define T3ALLOWINVALIDSSLVALIDATEMIN 0
#define T3ALLOWINVALIDSSLVALIDATEMAX 1
#define T3ALLOWINVALIDSSLRESTARTREQUIRED 0

// Define T3S3COMPATIBLE 
int T3S3COMPATIBLE;  // Connect to T3 storage using HTTPS 
#define DEFAULTT3S3COMPATIBLE "0"
#define T3S3COMPATIBLETAG "T3 S3 compatible"
#define T3S3COMPATIBLEHELP "T3 storage is S3 Compatible"
#define T3S3COMPATIBLEVALIDATESTRING 0
#define T3S3COMPATIBLEVALIDATEMIN 0
#define T3S3COMPATIBLEVALIDATEMAX 1
#define T3S3COMPATIBLERESTARTREQUIRED 0

// Define T3S3URL
char T3S3URL[2048];  // S3 compatible storage URL 
#define DEFAULTT3S3URL "amazonaws.com"
#define T3S3URLTAG "T3 S3 URL"
#define T3S3URLHELP "URL for accessing T3 S3 compatible storage" 
#define T3S3URLVALIDATESTRING 1
#define T3S3URLVALIDATEMIN 0
#define T3S3URLVALIDATEMAX 2048
#define T3S3URLRESTARTREQUIRED 0

// Define T3S3USEVIRTUALHOST 
int T3S3USEVIRTUALHOST;  // Connect to S3 storage using AWS Virtual Host style (or path style) 
#define DEFAULTT3S3USEVIRTUALHOST "1"
#define T3S3USEVIRTUALHOSTTAG "Use T3 S3 Virtual Host Style"
#define T3S3USEVIRTUALHOSTHELP "Use T3 S3 Virtual Host Style (otherwsie path style) to connect to the S3 storage endpoint"
#define T3S3USEVIRTUALHOSTVALIDATESTRING 0
#define T3S3USEVIRTUALHOSTVALIDATEMIN 0
#define T3S3USEVIRTUALHOSTVALIDATEMAX 1
#define T3S3USEVIRTUALHOSTRESTARTREQUIRED 0

// Define T3S3SIGNATUREV4 
int T3S3SIGNATUREV4;  // Use AWS Singnature V4 (or V2) 
#define DEFAULTT3S3SIGNATUREV4 "1"
#define T3S3SIGNATUREV4TAG "Use T3 AWS Signature Version 4"
#define T3S3SIGNATUREV4HELP "Use T3 AWS Signature Version 4 (otherwise V2) to connect to the S3 storage endpoint"
#define T3S3SIGNATUREV4VALIDATESTRING 0
#define T3S3SIGNATUREV4VALIDATEMIN 0
#define T3S3SIGNATUREV4VALIDATEMAX 1
#define T3S3SIGNATUREV4RESTARTREQUIRED 0

// Define T3S3ENABLEREGION 
int T3S3ENABLEREGION;  // Include S3 Region with connecting to S3 storage 
#define DEFAULTT3S3ENABLEREGION "1"
#define T3S3ENABLEREGIONTAG "T3 S3 enable Region"
#define T3S3ENABLEREGIONHELP "Use the configured T3 S3 REGION to connect to the S3 storage endpoint"
#define T3S3ENABLEREGIONVALIDATESTRING 0
#define T3S3ENABLEREGIONVALIDATEMIN 0
#define T3S3ENABLEREGIONVALIDATEMAX 1
#define T3S3ENABLEREGIONRESTARTREQUIRED 0

// Define T3S3REGION
char T3S3REGION[2048];  // The S3 REGION to use 
#define DEFAULTT3S3REGION "us-west-1"
#define T3S3REGIONTAG "T3 S3 Region"
#define T3S3REGIONHELP "The AWS T3 S3 Region"
#define T3S3REGIONVALIDATESTRING 1
#define T3S3REGIONVALIDATEMIN 5
#define T3S3REGIONVALIDATEMAX 2048
#define T3S3REGIONRESTARTREQUIRED 0

// Define T3S3BUCKET
char T3S3BUCKET[2048];  // The S3 Bucket to use 
#define DEFAULTT3S3BUCKET "nexfs"
#define T3S3BUCKETTAG "T3 S3 Bucket"
#define T3S3BUCKETHELP "The T3 S3 Bucket to use"
#define T3S3BUCKETVALIDATESTRING 1
#define T3S3BUCKETVALIDATEMIN 0
#define T3S3BUCKETVALIDATEMAX 2048
#define T3S3BUCKETRESTARTREQUIRED 0

// Define T3S3PORT
int T3S3PORT;  // The S3 Port to use
#define DEFAULTT3S3PORT "9000"
#define T3S3PORTTAG "T3 S3 Port"
#define T3S3PORTHELP "The TCP T3 S3 Port"
#define T3S3PORTVALIDATESTRING 0
#define T3S3PORTVALIDATEMIN 0
#define T3S3PORTVALIDATEMAX 16384
#define T3S3PORTRESTARTREQUIRED 0

// Define T3S3RETRY404
int T3S3RETRY404;  // Time to wait before retring on receiving a 404 to a S3 request
#define DEFAULTT3S3RETRY404 "0"
#define T3S3RETRY404TAG "T3 S3 Retry 404"
#define T3S3RETRY404HELP "Retry the T3 S3 request on receiving a 404 (may impact read/write preforamnce)"
#define T3S3RETRY404VALIDATESTRING 0
#define T3S3RETRY404VALIDATEMIN 0
#define T3S3RETRY404VALIDATEMAX 1
#define T3S3RETRY404RESTARTREQUIRED 0

// Define T3S3RETRY404SLEEP
int  T3S3RETRY404SLEEP;  // Time to wait before retring a 404 T3 S3 request
#define DEFAULTT3S3RETRY404SLEEP "0"
#define T3S3RETRY404SLEEPTAG "T3 S3 404 Retry ms Sleep"
#define T3S3RETRY404SLEEPHELP "The time in ms to wait before retrying 404 T3 S3 request, a value > 0 will impact performance"
#define T3S3RETRY404SLEEPVALIDATESTRING 0
#define T3S3RETRY404SLEEPVALIDATEMIN 0
#define T3S3RETRY404SLEEPVALIDATEMAX 999999
#define T3S3RETRY404SLEEPRESTARTREQUIRED 0

// Define T3S3RETRYSLEEP
int T3S3RETRYSLEEP;  // Time to wait before retring a failed S3 request
#define DEFAULTT3S3RETRYSLEEP "1"
#define T3S3RETRYSLEEPTAG "T3 S3 Retry Sleep"
#define T3S3RETRYSLEEPHELP "The time in seconds to wait before retring a failed S3 request"
#define T3S3RETRYSLEEPVALIDATESTRING 0
#define T3S3RETRYSLEEPVALIDATEMIN 0
#define T3S3RETRYSLEEPVALIDATEMAX 360
#define T3S3RETRYSLEEPRESTARTREQUIRED 0

// Define T3S3RETRIES
int T3S3RETRIES;  // Time to wait before retring a failed S3 request
#define DEFAULTT3S3RETRIES "3"
#define T3S3RETRIESTAG "T3 S3 Retries"
#define T3S3RETRIESHELP "The maximum number of times to retry a failing T3 S3 request"
#define T3S3RETRIESVALIDATESTRING 0
#define T3S3RETRIESVALIDATEMIN 0
#define T3S3RETRIESVALIDATEMAX 12
#define T3S3RETRIESRESTARTREQUIRED 0

// Define T3S3REQTIMEOUT
int T3S3MAXREQTIME;  // Time passed before aborting a S3 request
#define DEFAULTT3S3MAXREQTIME "120"
#define T3S3MAXREQTIMETAG "T3 S3 Max Request Time"
#define T3S3MAXREQTIMEHELP "The maximum number of seconds a S3 request can take before it is aborted"
#define T3S3MAXREQTIMEVALIDATESTRING 0
#define T3S3MAXREQTIMEVALIDATEMIN 5
#define T3S3MAXREQTIMEVALIDATEMAX 3600
#define T3S3MAXREQTIMERESTARTREQUIRED 0

// Define T3S3MAXCONNECTTIMEOUT
int T3S3MAXCONNECTTIMEOUT;
#define DEFAULTT3S3MAXCONNECTTIMEOUT "15"
#define T3S3MAXCONNECTTIMEOUTTAG "T3S3MAXCONNECTTIMEOUT"
#define T3S3MAXCONNECTTIMEOUTHELP "How long to before timing out a new connection to the cconfigured Tier3 S3 Storage"
#define T3S3MAXCONNECTTIMEOUTVALIDATESTRING 0 
#define T3S3MAXCONNECTTIMEOUTVALIDATEMIN 15 
#define T3S3MAXCONNECTTIMEOUTVALIDATEMAX 180 
#define T3S3MAXCONNECTTIMEOUTRESTARTREQUIRED 0 

// Define T3AWSSecretAccessKey
char T3AWSSecretAccessKey[2048];  // The Secret Access Key 
#define DEFAULTT3AWSSecretAccessKey "minioadmin"
#define T3AWSSecretAccessKeyTAG "AWSSecretAccessKey"
#define T3AWSSecretAccessKeyHELP "The Secret Access Key to using for accessing the S3 compatible storage"
#define T3AWSSecretAccessKeyVALIDATESTRING 1
#define T3AWSSecretAccessKeyVALIDATEMIN 0
#define T3AWSSecretAccessKeyVALIDATEMAX 2048
#define T3AWSSecretAccessKeyRESTARTREQUIRED 0

// Define T3AWSAccessKeyId
char T3AWSAccessKeyId[2048];  // The AWS Access Key Id 
#define DEFAULTT3AWSAccessKeyId "minioadmin"
#define T3AWSAccessKeyIdTAG "AWSSecretAccessKey"
#define T3AWSAccessKeyIdHELP "The Secret Access Key to using for accessing the S3 compatible storage"
#define T3AWSAccessKeyIdVALIDATESTRING 1
#define T3AWSAccessKeyIdVALIDATEMIN 0
#define T3AWSAccessKeyIdVALIDATEMAX 2048
#define T3AWSAccessKeyIdRESTARTREQUIRED 0

// Define T3INDEXSYNCENABLED
int T3INDEXSYNCENABLED;  //
#define DEFAULTT3INDEXSYNCENABLED "0"
#define T3INDEXSYNCENABLEDTAG "T3INDEXSYNCENABLED"
#define T3INDEXSYNCENABLEDHELP "Enable replication of structure index records to Tier-3 storage"
#define T3INDEXSYNCENABLEDVALIDATESTRING 0
#define T3INDEXSYNCENABLEDVALIDATEMIN 0
#define T3INDEXSYNCENABLEDVALIDATEMAX 1
#define T3INDEXSYNCENABLEDRESTARTREQUIRED 1 

// Define T3INDEXSYNCPREFIX
char T3INDEXSYNCPREFIX[2048];  // The AWS Access Key Id 
#define DEFAULTT3INDEXSYNCPREFIX "/nexfsidx"
#define T3INDEXSYNCPREFIXTAG "T3INDEXSYNCPREFIX"
#define T3INDEXSYNCPREFIXHELP "Prefix of replicated structure information in the T3 storage bucket" 
#define T3INDEXSYNCPREFIXVALIDATESTRING 1
#define T3INDEXSYNCPREFIXVALIDATEMIN 0
#define T3INDEXSYNCPREFIXVALIDATEMAX 2048
#define T3INDEXSYNCPREFIXRESTARTREQUIRED 0

// Define T3COMPRESSIONLEVEL
int T3COMPRESSIONLEVEL;
#define DEFAULTT3COMPRESSIONLEVEL "6"
#define T3COMPRESSIONLEVELTAG "T3COMPRESSIONLEVEL"
#define T3COMPRESSIONLEVELHELP "Tier-3 Level of Compression, from 0-9, 0 Best Speed, to 9 Best Compression"
#define T3COMPRESSIONLEVELVALIDATESTRING 0
#define T3COMPRESSIONLEVELVALIDATEMIN 0
#define T3COMPRESSIONLEVELVALIDATEMAX 9 
#define T3COMPRESSIONLEVELRESTARTREQUIRED 0

// Define T3COMPRESSIONMODE
int T3COMPRESSIONMODE;
#define DEFAULTT3COMPRESSIONMODE "1"
#define T3COMPRESSIONMODETAG "T3COMPRESSIONMODE"
#define T3COMPRESSIONMODEHELP "Enable compression of T3 data, when enabled, which compression engine to use, 0=off, 1=zlib"
#define T3COMPRESSIONMODEVALIDATESTRING 0
#define T3COMPRESSIONMODEVALIDATEMIN 0
#define T3COMPRESSIONMODEVALIDATEMAX 1 
#define T3COMPRESSIONMODERESTARTREQUIRED 0

// Define T3COMPRESSIONMINPERCENT
int T3COMPRESSIONMINPERCENT;
#define DEFAULTT3COMPRESSIONMINPERCENT "5"
#define T3COMPRESSIONMINPERCENTTAG "T3COMPRESSIONMINPERCENT"
#define T3COMPRESSIONMINPERCENTHELP "If the compressed data saves less than this percentage of storage, then don't store the data compressed"
#define T3COMPRESSIONMINPERCENTVALIDATESTRING 0
#define T3COMPRESSIONMINPERCENTVALIDATEMIN 0
#define T3COMPRESSIONMINPERCENTVALIDATEMAX 50 
#define T3COMPRESSIONMINPERCENTRESTARTREQUIRED 0

// Define T3COMPRESSIONMINCHUNKDATABYTES
int T3COMPRESSIONMINCHUNKDATABYTES;
#define DEFAULTT3COMPRESSIONMINCHUNKDATABYTES "2048"
#define T3COMPRESSIONMINCHUNKDATABYTESTAG "T3COMPRESSIONMINCHUNKDATABYTES"
#define T3COMPRESSIONMINCHUNKDATABYTESHELP "If the data chunk contains less than this amount of bytes, don't attempt compression"
#define T3COMPRESSIONMINCHUNKDATABYTESVALIDATESTRING 0
#define T3COMPRESSIONMINCHUNKDATABYTESVALIDATEMIN 0
#define T3COMPRESSIONMINCHUNKDATABYTESVALIDATEMAX 512000 
#define T3COMPRESSIONMINCHUNKDATABYTESRESTARTREQUIRED 0

// Define T3COMPAREETAG
int T3COMPAREETAG;
#define DEFAULTT3COMPAREETAG "0"
#define T3COMPAREETAGTAG "T3COMPAREETAG"
#define T3COMPAREETAGHELP "Reload the etag from T3 and compare to local data before deciding to re-upload a chunk"
#define T3COMPAREETAGVALIDATESTRING 0
#define T3COMPAREETAGVALIDATEMIN 0
#define T3COMPAREETAGVALIDATEMAX 1 
#define T3COMPAREETAGRESTARTREQUIRED 0

// Define MOUNTPOINT
char MOUNTPOINT[2048];  // The nexfs mountpoint, needed for nexfscli to communicate with the nexfs storage server
#define DEFAULTMOUNTPOINT "/mnt/nexfs"
#define MOUNTPOINTTAG "MOUNTPOINT"
#define MOUNTPOINTHELP "NEXFS Mountpoint, needed for nexfscli to work, must match the nexfs mountpoint although this setting is not used here by the nexfs storgae server itself"
#define MOUNTPOINTVALIDATESTRING 1
#define MOUNTPOINTVALIDATEMIN 2
#define MOUNTPOINTVALIDATEMAX 2048
#define MOUNTPOINTRESTARTREQUIRED 1

// Define GFSLOGLEVEL
char GFSLOGLEVEL[8];
#define DEFAULTGFSLOGLEVEL "NOTICE"
#define GFSLOGLEVELTAG "LOGLEVEL"
#define GFSLOGLEVELHELP "The Loglevel, one of CRIT, ERR, WARNING, NOTICE, INFO or DEBUG"
#define GFSLOGLEVELVALIDATESTRING 1
#define GFSLOGLEVELVALIDATEMIN 2
#define GFSLOGLEVELVALIDATEMAX 8
#define GFSLOGLEVELRESTARTREQUIRED 0

// Define SYSLOGFACILITY
char SYSLOGFACILITY[11];
#define DEFAULTSYSLOGFACILITY "LOG_USER"
#define SYSLOGFACILITYTAG "SYSLOGFACILITY"
#define SYSLOGFACILITYHELP "The Syslog Facility to use, one of LOG_USER (default), LOG_LOCAL0...7"
#define SYSLOGFACILITYVALIDATESTRING 1
#define SYSLOGFACILITYVALIDATEMIN 2
#define SYSLOGFACILITYVALIDATEMAX 10 
#define SYSLOGFACILITYRESTARTREQUIRED 0

// Define SNMPTRAPENABLED
int SNMPTRAPENABLED;
#define DEFAULTSNMPTRAPENABLED "0"
#define SNMPTRAPENABLEDTAG "Enable SNMPTraps"
#define SNMPTRAPENABLEDHELP "Enable sending of SNMP traps when system state changes occur, 0=disabled, 1=enabled"
#define SNMPTRAPENABLEDVALIDATESTRING 0 
#define SNMPTRAPENABLEDVALIDATEMIN 0 
#define SNMPTRAPENABLEDVALIDATEMAX 1 
#define SNMPTRAPENABLEDRESTARTREQUIRED 0 

// Define SNMPTRAPVERSION
int SNMPTRAPVERSION;
#define DEFAULTSNMPTRAPVERSION "2"
#define SNMPTRAPVERSIONTAG "SNMP Version"
#define SNMPTRAPVERSIONHELP "The SNMP Version to use when sending traps, 2=version 2c, 3= version 3"
#define SNMPTRAPVERSIONVALIDATESTRING 0 
#define SNMPTRAPVERSIONVALIDATEMIN 2 
#define SNMPTRAPVERSIONVALIDATEMAX 3 
#define SNMPTRAPVERSIONRESTARTREQUIRED 0 

// Define SNMPTRAPCOMMUNITY
char SNMPTRAPCOMMUNITY[255];
#define DEFAULTSNMPTRAPCOMMUNITY "public"
#define SNMPTRAPCOMMUNITYTAG "SNMP Community"
#define SNMPTRAPCOMMUNITYHELP "The SNMP Community to use for 2c traps"
#define SNMPTRAPCOMMUNITYVALIDATESTRING 1 
#define SNMPTRAPCOMMUNITYVALIDATEMIN 0 
#define SNMPTRAPCOMMUNITYVALIDATEMAX 255 
#define SNMPTRAPCOMMUNITYRESTARTREQUIRED 0 

// Define SNMPTRAPAGENTS
char SNMPTRAPAGENTS[1024];
#define DEFAULTSNMPTRAPAGENTS "snmphost"
#define SNMPTRAPAGENTSTAG "Snmp Trap Agents"
#define SNMPTRAPAGENTSHELP "A list of one or more SNMP trap destiniations (agents), seperate each agent with a comma, agents can be specified as hostname or hostname:port, or protocol:hostname, or protocol:hostname:port where protocol is either udp or TCP, port defaults to 162 and protocol defaults to udp, see man snmpcmd for IPv6 options"
#define SNMPTRAPAGENTSVALIDATESTRING 1 
#define SNMPTRAPAGENTSVALIDATEMIN 0 
#define SNMPTRAPAGENTSVALIDATEMAX 1023 
#define SNMPTRAPAGENTSRESTARTREQUIRED 0 

// Define SNMPTRAPV3SECURITYLEVEL
int SNMPTRAPV3SECURITYLEVEL;
#define DEFAULTSNMPTRAPV3SECURITYLEVEL "0"
#define SNMPTRAPV3SECURITYLEVELTAG "SNMPv3 SecurityLevel"
#define SNMPTRAPV3SECURITYLEVELHELP "Set the cwsecurity level (0=noAuthNoPriv, 1=authNoPriv, 2=authPriv) for SNMPv3 messages"
#define SNMPTRAPV3SECURITYLEVELVALIDATESTRING 0 
#define SNMPTRAPV3SECURITYLEVELVALIDATEMIN 0 
#define SNMPTRAPV3SECURITYLEVELVALIDATEMAX 2 
#define SNMPTRAPV3SECURITYLEVELRESTARTREQUIRED 0 

// Define SNMPTRAPV3AUTHPROTOCOL
int SNMPTRAPV3AUTHPROTOCOL;
#define DEFAULTSNMPTRAPV3AUTHPROTOCOL "2"
#define SNMPTRAPV3AUTHPROTOCOLTAG "SNMP V3 AuthProtocol"
#define SNMPTRAPV3AUTHPROTOCOLHELP "Set the authentication protocol (0=NONE|1=MD5|2=SHA|3=SHA-512|4=SHA-384|5=SHA-256|6=SHA-224) used for authenticated SNMPv3 messages"
#define SNMPTRAPV3AUTHPROTOCOLVALIDATESTRING 0 
#define SNMPTRAPV3AUTHPROTOCOLVALIDATEMIN 0 
#define SNMPTRAPV3AUTHPROTOCOLVALIDATEMAX 6 
#define SNMPTRAPV3AUTHPROTOCOLRESTARTREQUIRED 0 

// Define SNMPTRAPV3AUTHPASSWORD
char SNMPTRAPV3AUTHPASSWORD[33];
#define DEFAULTSNMPTRAPV3AUTHPASSWORD ""
#define SNMPTRAPV3AUTHPASSWORDTAG "SNMPv3 AuthPassword"
#define SNMPTRAPV3AUTHPASSWORDHELP "The SNMP Version 3 authentication pass phrase"
#define SNMPTRAPV3AUTHPASSWORDVALIDATESTRING 1 
#define SNMPTRAPV3AUTHPASSWORDVALIDATEMIN 0 
#define SNMPTRAPV3AUTHPASSWORDVALIDATEMAX 32 
#define SNMPTRAPV3AUTHPASSWORDRESTARTREQUIRED 0 

// Define SNMPTRAPV3CONTEXTENGINEID
char SNMPTRAPV3CONTEXTENGINEID[255];
#define DEFAULTSNMPTRAPV3CONTEXTENGINEID ""
#define SNMPTRAPV3CONTEXTENGINEIDTAG "SNMPv3 EngineID"
#define SNMPTRAPV3CONTEXTENGINEIDHELP "Set the authoritative (security) engineID used for SNMPv3 REQUEST messages, given as a hexadecimal string (optionally prefixed by 0x)"
#define SNMPTRAPV3CONTEXTENGINEIDVALIDATESTRING 1 
#define SNMPTRAPV3CONTEXTENGINEIDVALIDATEMIN 0 
#define SNMPTRAPV3CONTEXTENGINEIDVALIDATEMAX 254 
#define SNMPTRAPV3CONTEXTENGINEIDRESTARTREQUIRED 0 

// Define SNMPTRAPV3SECURITYNAME
char SNMPTRAPV3SECURITYNAME[255];
#define DEFAULTSNMPTRAPV3SECURITYNAME ""
#define SNMPTRAPV3SECURITYNAMETAG "SNMPv3 securityName"
#define SNMPTRAPV3SECURITYNAMEHELP "Set the securityName used for authenticated SNMPv3 messages"
#define SNMPTRAPV3SECURITYNAMEVALIDATESTRING 1 
#define SNMPTRAPV3SECURITYNAMEVALIDATEMIN 0 
#define SNMPTRAPV3SECURITYNAMEVALIDATEMAX 254 
#define SNMPTRAPV3SECURITYNAMERESTARTREQUIRED 0 

// Define SNMPTRAPV3PRIVACYPROTOCOL
int SNMPTRAPV3PRIVACYPROTOCOL;
#define DEFAULTSNMPTRAPV3PRIVACYPROTOCOL "1"
#define SNMPTRAPV3PRIVACYPROTOCOLTAG "SNMPv3 privacy protocol"
#define SNMPTRAPV3PRIVACYPROTOCOLHELP "Set the privacy protocol (0=DES or 1=AES) used for encrypted SNMPv3 messages"
#define SNMPTRAPV3PRIVACYPROTOCOLVALIDATESTRING 0 
#define SNMPTRAPV3PRIVACYPROTOCOLVALIDATEMIN 0 
#define SNMPTRAPV3PRIVACYPROTOCOLVALIDATEMAX 1 
#define SNMPTRAPV3PRIVACYPROTOCOLRESTARTREQUIRED 0 

// Define SNMPTRAPV3PRIVACYPASSWORD
char SNMPTRAPV3PRIVACYPASSWORD[33];
#define DEFAULTSNMPTRAPV3PRIVACYPASSWORD ""
#define SNMPTRAPV3PRIVACYPASSWORDTAG "SNMPv3 privacy pass phrase"
#define SNMPTRAPV3PRIVACYPASSWORDHELP "Set the privacy pass phrase used for encrypted SNMPv3 messages"
#define SNMPTRAPV3PRIVACYPASSWORDVALIDATESTRING 1 
#define SNMPTRAPV3PRIVACYPASSWORDVALIDATEMIN 0 
#define SNMPTRAPV3PRIVACYPASSWORDVALIDATEMAX 32 
#define SNMPTRAPV3PRIVACYPASSWORDRESTARTREQUIRED 0 

// Define MAXHANDLEPAGES
int MAXHANDLEPAGES;
#define DEFAULTMAXHANDLEPAGES "4"
#define MAXHANDLEPAGESTAG "MAXHANDLEPAGES"
#define MAXHANDLEPAGESHELP "The maximum number of cache pages that can exist for a open file handle, higher number increases concurrency and memory usage"
#define MAXHANDLEPAGESVALIDATESTRING 0
#define MAXHANDLEPAGESVALIDATEMIN 1
#define MAXHANDLEPAGESVALIDATEMAX 128
#define MAXHANDLEPAGESRESTARTREQUIRED 1

// Define CACHELOCKWAIT
int CACHELOCKWAIT;
#define DEFAULTCACHELOCKWAIT "4000"
#define CACHELOCKWAITTAG "CACHELOCKWAIT"
#define CACHELOCKWAITHELP "The number of nano seconds to wait between attempts to take a buffer lock"
#define CACHELOCKWAITVALIDATESTRING 0
#define CACHELOCKWAITVALIDATEMIN 5
#define CACHELOCKWAITVALIDATEMAX 99999999
#define CACHELOCKWAITRESTARTREQUIRED 0

// Define ROOTONLYACCESS
int ROOTONLYACCESS;
#define DEFAULTROOTONLYACCESS "0"
#define ROOTONLYACCESSTAG "ROOTONLYACCESS"
#define ROOTONLYACCESSHELP "If only the root user can access the nexfs filesystem, or if access is allowed for all users (When nexfs started using nexfscli)"
#define ROOTONLYACCESSVALIDATESTRING 0
#define ROOTONLYACCESSVALIDATEMIN 0
#define ROOTONLYACCESSVALIDATEMAX 1
#define ROOTONLYACCESSRESTARTREQUIRED 1

// Define ENFORCEPOSIXACLS
int ENFORCEPOSIXACLS; 
#define DEFAULTENFORCEPOSIXACLS "1"
#define ENFORCEPOSIXACLSTAG "ENFORCEPOSIXACLS"
#define ENFORCEPOSIXACLSHELP "Enforces POSIX ACL permission checking, restricting access based on file mode"
#define ENFORCEPOSIXACLSVALIDATESTRING 0
#define ENFORCEPOSIXACLSVALIDATEMIN 0
#define ENFORCEPOSIXACLSVALIDATEMAX 1
#define ENFORCEPOSIXACLSRESTARTREQUIRED 1

// Define NEXFSCMD
char NEXFSCMD[2048];
#define DEFAULTNEXFSCMD "nexfs.server"
#define NEXFSCMDTAG "nexfs.server path including binary"
#define NEXFSCMDHELP "nexfs.server binary including path if not in default search path, used by nexfscli"
#define NEXFSCMDVALIDATESTRING 1
#define NEXFSCMDVALIDATEMIN 5
#define NEXFSCMDVALIDATEMAX 2048
#define NEXFSCMDRESTARTREQUIRED 0

// Define TRUNCTATEMOVETOTIER3
int TRUNCTATEMOVETOTIER3;
#define DEFAULTTRUNCTATEMOVETOTIER3 "1"
#define TRUNCTATEMOVETOTIER3TAG "TRUNCTATEMOVETOTIER3" 
#define TRUNCTATEMOVETOTIER3HELP "Move Versioned datafiles to tier3 while waiting out final deletion period"
#define TRUNCTATEMOVETOTIER3VALIDATESTRING 0
#define TRUNCTATEMOVETOTIER3VALIDATEMIN 0
#define TRUNCTATEMOVETOTIER3VALIDATEMAX 1
#define TRUNCTATEMOVETOTIER3RESTARTREQUIRED 0

// Define VERSIONRETAINDAYS
int VERSIONRETAINDAYS;
#define DEFAULTVERSIONRETAINDAYS "7"
#define VERSIONRETAINDAYSTAG "VERSIONRETAINDAYS" 
#define VERSIONRETAINDAYSHELP "Days to retain versions of datafiles before final deletion"
#define VERSIONRETAINDAYSVALIDATESTRING 0
#define VERSIONRETAINDAYSVALIDATEMIN 0
#define VERSIONRETAINDAYSVALIDATEMAX 10000
#define VERSIONRETAINDAYSRESTARTREQUIRED 0

// Define DELETEPAUSED 
int DELETEPAUSED;  // if background deletions should run or be paused
#define DEFAULTDELETEPAUSED "0"
#define DELETEPAUSEDTAG "Deletions Paused"
#define DELETEPAUSEDHELP "If background deletions can run or are paused"
#define DELETEPAUSEDVALIDATESTRING 0
#define DELETEPAUSEDVALIDATEMIN 0 
#define DELETEPAUSEDVALIDATEMAX 1 
#define DELETEPAUSEDRESTARTREQUIRED 0 

// Define DELETEMAXTHREADS
int DELETEMAXTHREADS;  // the max number of JobScheduler threads
#define DEFAULTDELETEMAXTHREADS "4"
#define DELETEMAXTHREADSTAG "BG Deletion Threads"
#define DELETEMAXTHREADSHELP "The Maximum number of Background Deletions Threads that can run concurrently"
#define DELETEMAXTHREADSVALIDATESTRING 0
#define DELETEMAXTHREADSVALIDATEMIN 0 
#define DELETEMAXTHREADSVALIDATEMAX 32 
#define DELETEMAXTHREADSRESTARTREQUIRED 1 

// Define DELETESTARTWINDOW
int DELETESTARTWINDOW;  // Time of day to start bg deletions
#define DEFAULTDELETESTARTWINDOW "0000"
#define DELETESTARTWINDOWTAG "BG Deletions Start"
#define DELETESTARTWINDOWHELP "The earliest time of the day to run back ground deletions"
#define DELETESTARTWINDOWVALIDATESTRING 0
#define DELETESTARTWINDOWVALIDATEMIN 0 
#define DELETESTARTWINDOWVALIDATEMAX 2359 
#define DELETESTARTWINDOWRESTARTREQUIRED 0 

// Define DELETEENDWINDOW
int DELETEENDWINDOW;  // Time of day to stop/pause bg deletions
#define DEFAULTDELETEENDWINDOW "2359"
#define DELETEENDWINDOWTAG "BG Deletions End"
#define DELETEENDWINDOWHELP "The latest time of the day to run background deletions"
#define DELETEENDWINDOWVALIDATESTRING 0
#define DELETEENDWINDOWVALIDATEMIN 0 
#define DELETEENDWINDOWVALIDATEMAX 2359 
#define DELETEENDWINDOWRESTARTREQUIRED 0 

// Define DELETSLEEPMS
int DELETESLEEPMS;  // time in ms to sleep between each background deletion 
#define DEFAULTDELETESLEEPMS "0"
#define DELETESLEEPMSTAG "BG Deletion Sleep"
#define DELETESLEEPMSHELP "ms a worker thread will sleep between background migration jobs"
#define DELETESLEEPMSVALIDATESTRING 0
#define DELETESLEEPMSVALIDATEMIN 0 
#define DELETESLEEPMSVALIDATEMAX 999999 
#define DELETESLEEPMSRESTARTREQUIRED 0 

// Define DELETEFAILEDRETRYMINS
int DELETEFAILEDRETRYMINS;  // time in ms to sleep between each background deletion 
#define DEFAULTDELETEFAILEDRETRYMINS "720"
#define DELETEFAILEDRETRYMINSTAG "Failed Delete Retry mins"
#define DELETEFAILEDRETRYMINSHELP "Time to wait before retrying a failed background cleanup of a deleted file datafiles"
#define DELETEFAILEDRETRYMINSVALIDATESTRING 0
#define DELETEFAILEDRETRYMINSVALIDATEMIN 0 
#define DELETEFAILEDRETRYMINSVALIDATEMAX 999999 
#define DELETEFAILEDRETRYMINSRESTARTREQUIRED 0 

// Define TRUNCTATE0CREATEVERSION
int TRUNCTATE0CREATEVERSION;
#define DEFAULTTRUNCTATE0CREATEVERSION "1"
#define TRUNCTATE0CREATEVERSIONTAG "Truncate 0 Create Version" 
#define TRUNCTATE0CREATEVERSIONHELP "Create a verison when a file/object is truncated to 0 bytes, or purge datafiles on truncate"
#define TRUNCTATE0CREATEVERSIONVALIDATESTRING 0
#define TRUNCTATE0CREATEVERSIONVALIDATEMIN 0
#define TRUNCTATE0CREATEVERSIONVALIDATEMAX 1
#define TRUNCTATE0CREATEVERSIONRESTARTREQUIRED 0

// Define AUTORELESEDATAFILEMS 
int AUTORELESEDATAFILEMS;
#define DEFAULTAUTORELESEDATAFILEMS "80"
#define AUTORELESEDATAFILEMSTAG "Auto Release Datafile (ms)" 
#define AUTORELESEDATAFILEMSHELP "How long to keep an idle datafile open for closure (in ms)"
#define AUTORELESEDATAFILEMSVALIDATESTRING 0
#define AUTORELESEDATAFILEMSVALIDATEMIN 50
#define AUTORELESEDATAFILEMSVALIDATEMAX 5000
#define AUTORELESEDATAFILEMSRESTARTREQUIRED 0

// Define SECURITYCMDGROUP 
int SECURITYCMDGROUP;
#define DEFAULTSECURITYCMDGROUP "0"
#define SECURITYCMDGROUPTAG "Securitry CMD Group" 
#define SECURITYCMDGROUPHELP "User Group whos members can run nexfs admin commands"
#define SECURITYCMDGROUPVALIDATESTRING 0
#define SECURITYCMDGROUPVALIDATEMIN 0
#define SECURITYCMDGROUPVALIDATEMAX 65536
#define SECURITYCMDGROUPRESTARTREQUIRED 0

// Define SECURITYCMDGROUPACCESS
int SECURITYCMDGROUPACCESS;
#define DEFAULTSECURITYCMDGROUPACCESS "2"
#define SECURITYCMDGROUPACCESSTAG "Securitry CMD Group" 
#define SECURITYCMDGROUPACCESSHELP "User Group whos members can run nexfs admin commands, 0=no access, 1 read only, 2 read/write"
#define SECURITYCMDGROUPACCESSVALIDATESTRING 0
#define SECURITYCMDGROUPACCESSVALIDATEMIN 0
#define SECURITYCMDGROUPACCESSVALIDATEMAX 2
#define SECURITYCMDGROUPACCESSRESTARTREQUIRED 0

// Define SECURITYCONFGROUP 
int SECURITYCONFGROUP;
#define DEFAULTSECURITYCONFGROUP "0"
#define SECURITYCONFGROUPTAG "Securitry CMD Group" 
#define SECURITYCONFGROUPHELP "User Group whos members can run nexfs admin commands"
#define SECURITYCONFGROUPVALIDATESTRING 0
#define SECURITYCONFGROUPVALIDATEMIN 0
#define SECURITYCONFGROUPVALIDATEMAX 65536
#define SECURITYCONFGROUPRESTARTREQUIRED 0

// Define SECURITYCONFGROUPACCESS
int SECURITYCONFGROUPACCESS;
#define DEFAULTSECURITYCONFGROUPACCESS "2"
#define SECURITYCONFGROUPACCESSTAG "Securitry Configuration Group" 
#define SECURITYCONFGROUPACCESSHELP "User Group whos members can view and make nexfs configuration changes, 0=no access, 1 read only, 2 read/write"
#define SECURITYCONFGROUPACCESSVALIDATESTRING 0
#define SECURITYCONFGROUPACCESSVALIDATEMIN 0
#define SECURITYCONFGROUPACCESSVALIDATEMAX 2
#define SECURITYCONFGROUPACCESSRESTARTREQUIRED 0

// Define NEXFSLICENSEKEY
char NEXFSLICENSEKEY[50];
#define DEFAULTNEXFSLICENSEKEY "0"
#define NEXFSLICENSEKEYTAG "Nexfs License"
#define NEXFSLICENSEKEYHELP "The Nexfs License Key" 
#define NEXFSLICENSEKEYVALIDATESTRING 1
#define NEXFSLICENSEKEYVALIDATEMIN 1
#define NEXFSLICENSEKEYVALIDATEMAX 48 
#define NEXFSLICENSEKEYRESTARTREQUIRED 0 

// Define NEXFSAPICHANGECMDGROUP
int NEXFSAPICHANGECMDGROUP; // NOT IN USE
#define DEFAULTNEXFSAPICHANGECMDGROUP "0"
#define NEXFSAPICHANGECMDGROUPTAG "NEXFSAPICHANGECMDGROUP"
#define NEXFSAPICHANGECMDGROUPHELP "The user group who can issue commands against the nexfs api" 
#define NEXFSAPICHANGECMDGROUPVALIDATESTRING 0
#define NEXFSAPICHANGECMDGROUPVALIDATEMIN 0
#define NEXFSAPICHANGECMDGROUPVALIDATEMAX 65536 
#define NEXFSAPICHANGECMDGROUPRESTARTREQUIRED 0

// Define NEXFSAPICHANGECONFGROUP
int NEXFSAPICHANGECONFGROUP; // NOT IN USE
#define DEFAULTNEXFSAPICHANGECONFGROUP "0"
#define NEXFSAPICHANGECONFGROUPTAG "NEXFSAPICHANGECONFGROUP"
#define NEXFSAPICHANGECONFGROUPHELP "The user group who can issue configuration requests against the nexfs api" 
#define NEXFSAPICHANGECONFGROUPVALIDATESTRING 0
#define NEXFSAPICHANGECONFGROUPVALIDATEMIN 0
#define NEXFSAPICHANGECONFGROUPVALIDATEMAX 65536 
#define NEXFSAPICHANGECONFGROUPRESTARTREQUIRED 0

// Define DROPCACHEONOPEN
int DROPCACHEONOPEN;
#define DEFAULTDROPCACHEONOPEN "0"
#define DROPCACHEONOPENTAG "DROPCACHEONOPEN"
#define DROPCACHEONOPENHELP "Drop File Kernel Cache on File Open, 0=never, 1=always, >1 if file mtime has changed or max x seconds" 
#define DROPCACHEONOPENVALIDATESTRING 0
#define DROPCACHEONOPENVALIDATEMIN 0
#define DROPCACHEONOPENVALIDATEMAX 86400
#define DROPCACHEONOPENRESTARTREQUIRED 1

// Define ENABLEHARDDELETE
int ENABLEHARDDELETE;
#define DEFAULTENABLEHARDDELETE "1"
#define ENABLEHARDDELETETAG "ENBALEHARDDELETE"
#define ENABLEHARDDELETEHELP "Enable Hard File Delete"
#define ENABLEHARDDELETEVALIDATESTRING 0
#define ENABLEHARDDELETEVALIDATEMIN 0
#define ENABLEHARDDELETEVALIDATEMAX 1
#define ENABLEHARDDELETERESTARTREQUIRED 1

// Define ENABLEWRITEBUFFERING
int ENABLEWRITEBUFFERING;
#define DEFAULTENABLEWRITEBUFFERING "1"
#define ENABLEWRITEBUFFERINGTAG "ENABLEWRITEBUFFERING"
#define ENABLEWRITEBUFFERINGHELP "Enable Write Buffering, group small block writes together to increase performance, client may receive write ok before data is written to perm storage"
#define ENABLEWRITEBUFFERINGVALIDATESTRING 0
#define ENABLEWRITEBUFFERINGVALIDATEMIN 0
#define ENABLEWRITEBUFFERINGVALIDATEMAX 1
#define ENABLEWRITEBUFFERINGRESTARTREQUIRED 1

// Define NEXFSMAXOPENFILES
int NEXFSMAXOPENFILES;
#define DEFAULTNEXFSMAXOPENFILES "65536"
#define NEXFSMAXOPENFILESTAG "NEXFSMAXOPENFILES"
#define NEXFSMAXOPENFILESHELP "Max number of open file handles Nexfs can support (includes all internal file handles)" 
#define NEXFSMAXOPENFILESVALIDATESTRING 0
#define NEXFSMAXOPENFILESVALIDATEMIN 1024
#define NEXFSMAXOPENFILESVALIDATEMAX 1048576 
#define NEXFSMAXOPENFILESRESTARTREQUIRED 1

// Define LOOKUPCACHEEXPIRY
int LOOKUPCACHEEXPIRY;
#define DEFAULTLOOKUPCACHEEXPIRY "1"
#define LOOKUPCACHEEXPIRYTAG "LOOKUPCACHEEXPIRY"
#define LOOKUPCACHEEXPIRYHELP "How many seconds the directory entries will be cached in the kernel, 0 = no caching"
#define LOOKUPCACHEEXPIRYVALIDATESTRING 0
#define LOOKUPCACHEEXPIRYVALIDATEMIN 0
#define LOOKUPCACHEEXPIRYVALIDATEMAX 86400 
#define LOOKUPCACHEEXPIRYRESTARTREQUIRED 1

// Define ATTRCACHEEXPIRY
int ATTRCACHEEXPIRY;
#define DEFAULTATTRCACHEEXPIRY "1"
#define ATTRCACHEEXPIRYTAG "ATTRCACHEEXPIRY"
#define ATTRCACHEEXPIRYHELP "Number of seconds to cache fuse directory entry attributes in the kernel, 0 = no caching"
#define ATTRCACHEEXPIRYVALIDATESTRING 0
#define ATTRCACHEEXPIRYVALIDATEMIN 0
#define ATTRCACHEEXPIRYVALIDATEMAX 86400 
#define ATTRCACHEEXPIRYRESTARTREQUIRED 1

// Define BUFFERCHUNKONREAD
int BUFFERCHUNKONREAD;
#define DEFAULTBUFFERCHUNKONREAD "0"
#define BUFFERCHUNKONREADTAG "BUFFERCHUNKONREAD"
#define BUFFERCHUNKONREADHELP "Load data chunk into a a lower buffer on read from Tier3+"
#define BUFFERCHUNKONREADVALIDATESTRING 0
#define BUFFERCHUNKONREADVALIDATEMIN 0
#define BUFFERCHUNKONREADVALIDATEMAX 1 
#define BUFFERCHUNKONREADRESTARTREQUIRED 0

int CTIMEISREQTIME;
#define DEFAULTCTIMEISREQTIME "0"
#define CTIMEISREQTIMETAG "CTIMEISREQTIME"
#define CTIMEISREQTIMEHELP "When enabled, the ctime of a file stat result is always set to the current time of the stat operation"
#define CTIMEISREQTIMEVALIDATESTRING 0
#define CTIMEISREQTIMEVALIDATEMIN 0
#define CTIMEISREQTIMEVALIDATEMAX 1 
#define CTIMEISREQTIMERESTARTREQUIRED 0

// Define NFSMAXEXPORTS
int NFSMAXEXPORTS;
#define DEFAULTNFSMAXEXPORTS "12"
#define NFSMAXEXPORTSTAG "NFSMAXEXPORTS"
#define NFSMAXEXPORTSHELP "Maximum number of NFS exports that can be configured"
#define NFSMAXEXPORTSVALIDATESTRING 0
#define NFSMAXEXPORTSVALIDATEMIN 0
#define NFSMAXEXPORTSVALIDATEMAX 256 
#define NFSMAXEXPORTSRESTARTREQUIRED 0

// Define NFSENABLED
int NFSENABLED;
#define DEFAULTNFSENABLED "0"
#define NFSENABLEDTAG "NFSENABLED"
#define NFSENABLEDHELP "Enable NFS management support, 1=Enabled, 0=Disabled"
#define NFSENABLEDVALIDATESTRING 0
#define NFSENABLEDVALIDATEMIN 0
#define NFSENABLEDVALIDATEMAX 1 
#define NFSENABLEDRESTARTREQUIRED 0

// Define NFSSTARTSTOP
int NFSSTARTSTOP;
#define DEFAULTNFSSTARTSTOP "0"
#define NFSSTARTSTOPTAG "NFSSTARTSTOP"
#define NFSSTARTSTOPHELP "Does Nexfs start and stop the Kernel NFS Server on Nexfs Startup and Shutdown, 1=Yes, 0=No" 
#define NFSSTARTSTOPVALIDATESTRING 0
#define NFSSTARTSTOPVALIDATEMIN 0
#define NFSSTARTSTOPVALIDATEMAX 1 
#define NFSSTARTSTOPRESTARTREQUIRED 0

// Define ISCSISERVERID
int ISCSISERVERID;
#define DEFAULTISCSISERVERID "1"
#define ISCSISERVERIDTAG "ISCSISERVERID"
#define ISCSISERVERIDHELP "Intergrated iSCSI Server ID"
#define ISCSISERVERIDVALIDATESTRING 0
#define ISCSISERVERIDVALIDATEMIN 0
#define ISCSISERVERIDVALIDATEMAX 255 
#define ISCSISERVERIDRESTARTREQUIRED 0

// Define ISCSIENABLED
int ISCSIENABLED;
#define DEFAULTISCSIENABLED "0"
#define ISCSIENABLEDTAG "ISCSIENABLED"
#define ISCSIENABLEDHELP "Enabled Integrated iSCSI Server, 1=Enabled, 0=Disabled"
#define ISCSIENABLEDVALIDATESTRING 0
#define ISCSIENABLEDVALIDATEMIN 0
#define ISCSIENABLEDVALIDATEMAX 1 
#define ISCSIENABLEDRESTARTREQUIRED 0

// Define ISCSIIOTHREADS
int ISCSIIOTHREADS;
#define DEFAULTISCSIIOTHREADS "8"
#define ISCSIIOTHREADSTAG "ISCSIIOTHREADS"
#define ISCSIIOTHREADSHELP "Number of Integrated iSCSI target Threads" 
#define ISCSIIOTHREADSVALIDATESTRING 0
#define ISCSIIOTHREADSVALIDATEMIN 2
#define ISCSIIOTHREADSVALIDATEMAX 128 
#define ISCSIIOTHREADSRESTARTREQUIRED 1

// Define ISCSIMAXTARGETS
int ISCSIMAXTARGETS;
#define DEFAULTISCSIMAXTARGETS "32"
#define ISCSIMAXTARGETSTAG "Iscsi Max Targets"
#define ISCSIMAXTARGETSHELP "The Maximum number of iSCSI Targets that can be configured"
#define ISCSIMAXTARGETSVALIDATESTRING 0 
#define ISCSIMAXTARGETSVALIDATEMIN 4 
#define ISCSIMAXTARGETSVALIDATEMAX 128 
#define ISCSIMAXTARGETSRESTARTREQUIRED 0

// Define ISCSIMAXLUNS
int ISCSIMAXLUNS;
#define DEFAULTISCSIMAXLUNS "16"
#define ISCSIMAXLUNSTAG "ISCSIMAXLUNS"
#define ISCSIMAXLUNSHELP "Maximum number of iSCSI Luns supported by the Integrated iSCSI Server"
#define ISCSIMAXLUNSVALIDATESTRING 0
#define ISCSIMAXLUNSVALIDATEMIN 1
#define ISCSIMAXLUNSVALIDATEMAX 256 
#define ISCSIMAXLUNSRESTARTREQUIRED 0

// Define ISCSIMAXBINDINGS
int ISCSIMAXBINDINGS;
#define DEFAULTISCSIMAXBINDINGS "32"
#define ISCSIMAXBINDINGSTAG "ISCSIMAXBINDINGS"
#define ISCSIMAXBINDINGSHELP "Number of LUN to Interface bindings supported by the Integrated iSCSI Server" 
#define ISCSIMAXBINDINGSVALIDATESTRING 0
#define ISCSIMAXBINDINGSVALIDATEMIN 2 
#define ISCSIMAXBINDINGSVALIDATEMAX 1024 
#define ISCSIMAXBINDINGSRESTARTREQUIRED 0

// Define ISCSIMAXINTERFACES
int ISCSIMAXINTERFACES;
#define DEFAULTISCSIMAXINTERFACES "4"
#define ISCSIMAXINTERFACESTAG "ISCSIMAXINTERFACES"
#define ISCSIMAXINTERFACESHELP "Maximum number of Integrated iSCSI network interfaces supported"
#define ISCSIMAXINTERFACESVALIDATESTRING 0
#define ISCSIMAXINTERFACESVALIDATEMIN 1
#define ISCSIMAXINTERFACESVALIDATEMAX 32 
#define ISCSIMAXINTERFACESRESTARTREQUIRED 0

// Define ISCSIIQN
char ISCSIIQN[128];
#define DEFAULTISCSIIQN "iqn.2021-09.com.nexfs"
#define ISCSIIQNTAG "ISCSIIQN"
#define ISCSIIQNHELP "Integrated iSCSI IQN, applies to new IQNs without restart or existing on restart"  
#define ISCSIIQNVALIDATESTRING 1
#define ISCSIIQNVALIDATEMIN 10 
#define ISCSIIQNVALIDATEMAX 128 
#define ISCSIIQNRESTARTREQUIRED 0

// Define ISCSIIQNLOCALPART
char ISCSIIQNLOCALPART[32];
#define DEFAULTISCSIIQNLOCALPART "<hostname>"
#define ISCSIIQNLOCALPARTTAG "ISCSIIQNLOCALPART"
#define ISCSIIQNLOCALPARTHELP "Integrated iSCSI IQN localhost part, '<hostname>' defaults to server hostname"
#define ISCSIIQNLOCALPARTVALIDATESTRING 1
#define ISCSIIQNLOCALPARTVALIDATEMIN 0
#define ISCSIIQNLOCALPARTVALIDATEMAX 32 
#define ISCSIIQNLOCALPARTRESTARTREQUIRED 0

int TERMSANDCONDITIONSACCEPTED;
#define DEFAULTTERMSANDCONDITIONSACCEPTED "0"
#define TERMSANDCONDITIONSACCEPTEDTAG "TERMSANDCONDITIONSACCEPTED"
#define TERMSANDCONDITIONSACCEPTEDHELP "Must be set to 1 confirm acceptance of Nexustorage T&Cs available at https://www.nexustorage.com/nexustorage-terms-and-conditions"
#define TERMSANDCONDITIONSACCEPTEDVALIDATESTRING 0
#define TERMSANDCONDITIONSACCEPTEDVALIDATEMIN 0
#define TERMSANDCONDITIONSACCEPTEDVALIDATEMAX 1 
#define TERMSANDCONDITIONSACCEPTEDRESTARTREQUIRED 1

// DEFINE DEFAULTPOSIXUID 
int DEFAULTPOSIXUID;
#define DEFAULTDEFAULTPOSIXUID "65534"
#define DEFAULTPOSIXUIDTAG "Default POSIX UID"
#define DEFAULTPOSIXUIDHELP "The Default POSIX UID to use when a content/s3 user does not have one specifically assigned, 65534 is the nobody POSIX user on many systems, set to -1 for no default"
#define DEFAULTPOSIXUIDVALIDATESTRING 0 
#define DEFAULTPOSIXUIDVALIDATEMIN -1 
#define DEFAULTPOSIXUIDVALIDATEMAX 2147483647 
#define DEFAULTPOSIXUIDRESTARTREQUIRED 0 

// Define DEFAULTPOSIXGID
int DEFAULTPOSIXGID;
#define DEFAULTDEFAULTPOSIXGID "65534"
#define DEFAULTPOSIXGIDTAG "Default POSIX GID"
#define DEFAULTPOSIXGIDHELP "The Default POSIX GID to use when a content/s3 user does not have one specifically assigned, 65534 is the nogroup POSIX group on many systems"
#define DEFAULTPOSIXGIDVALIDATESTRING 0 
#define DEFAULTPOSIXGIDVALIDATEMIN 0 
#define DEFAULTPOSIXGIDVALIDATEMAX 2147483647 
#define DEFAULTPOSIXGIDRESTARTREQUIRED 0 

// Define DEFAULTALLUSERSPOSIXGROUP
char DEFAULTALLUSERSPOSIXGROUP[64];
#define DEFAULTDEFAULTALLUSERSPOSIXGROUP "staff"
#define DEFAULTALLUSERSPOSIXGROUPTAG "DEFAULTALLUSERSPOSIXGROUP"
#define DEFAULTALLUSERSPOSIXGROUPHELP "The POSIX group used for ALLUSERS S3 style ACLs"
#define DEFAULTALLUSERSPOSIXGROUPVALIDATESTRING 1
#define DEFAULTALLUSERSPOSIXGROUPVALIDATEMIN 0
#define DEFAULTALLUSERSPOSIXGROUPVALIDATEMAX 63 
#define DEFAULTALLUSERSPOSIXGROUPRESTARTREQUIRED 0

// Define S3UPLOADPREFIXDIR
char S3UPLOADPREFIXDIR[256];
#define DEFAULTS3UPLOADPREFIXDIR ".s3up1d"
#define S3UPLOADPREFIXDIRTAG "S3UPLOADPREFIXDIR"
#define S3UPLOADPREFIXDIRHELP "The directory within nexfsroot to use for in-progress S3 uploads"
#define S3UPLOADPREFIXDIRVALIDATESTRING 1
#define S3UPLOADPREFIXDIRVALIDATEMIN 0
#define S3UPLOADPREFIXDIRVALIDATEMAX 255 
#define S3UPLOADPREFIXDIRRESTARTREQUIRED 0

// Define S3USESHA256ETAG
int S3USESHA256ETAG;
#define DEFAULTS3USESHA256ETAG "1"
#define S3USESHA256ETAGTAG "Return SHA256 S3 Etag"
#define S3USESHA256ETAGHELP "Enabled to return a sha256 check sum of uloaded data as the etag, od disable to return the unique Nexfs objects etag"
#define S3USESHA256ETAGVALIDATESTRING 0 
#define S3USESHA256ETAGVALIDATEMIN 0 
#define S3USESHA256ETAGVALIDATEMAX 1 
#define S3USESHA256ETAGRESTARTREQUIRED 0 

// Define WSCONNECTIONIDLETIMEOUTSECONDS
int WSCONNECTIONIDLETIMEOUTSECONDS;
#define DEFAULTWSCONNECTIONIDLETIMEOUTSECONDS "30"
#define WSCONNECTIONIDLETIMEOUTSECONDSTAG "Webserver Idle Timeout"
#define WSCONNECTIONIDLETIMEOUTSECONDSHELP "Number of second after which to timeout a client web server connection which has stopped sending traffic"
#define WSCONNECTIONIDLETIMEOUTSECONDSVALIDATESTRING 0 
#define WSCONNECTIONIDLETIMEOUTSECONDSVALIDATEMIN 0 
#define WSCONNECTIONIDLETIMEOUTSECONDSVALIDATEMAX 14400 
#define WSCONNECTIONIDLETIMEOUTSECONDSRESTARTREQUIRED 0 

struct struct_nexfsconfinfo {
    char *defaultvalue;
    char *tag;
    char *help;
    int validatestring;
    int validatemin;
    int validatemax;
    int restartrequired; 
};

size_t gfs_configkeynamesum(char *);
int gfs_updateconfigfile(int, char *, char *, int);
int gfs_createconffile(char *, char *, char *, char *, char *, int , int , int , int );
int gfs_openconfigfile(char *, uint64_t *, int , int );
int gfs_getconfig(int, char *, char *, int, int);
int gfs_loadconfig_common(int);
int gfs_createdefaultconf(char *, char *, struct struct_nexfsconfinfo *, int);
int gfs_validateconfvalue(char *, char *, int);